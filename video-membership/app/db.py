from cassandra.auth import PlainTextAuthProvider
from cassandra.cqlengine import connection
from cassandra.cluster import Cluster, ExecutionProfile, EXEC_PROFILE_DEFAULT, ProtocolVersion
import json
import pathlib

# The __file__ attribute is a special attribute that contains the path of the current file.
BASE_PATH = pathlib.Path(__file__).resolve().parent

# This approach of constructing paths is platform-independent, meaning it will correctly handle directory separators on different operating systems (like slashes on Unix/Linux/macOS and backslashes on Windows).
# This makes the code more portable and reduces the risk of path-related errors when the application is run on different systems.
# The path to the secure connect bundle and token file are defined as constants. Where BASE_PATH is the directory containing the current file, and the path to the secure connect bundle and token file are relative to this directory.
# This ensures that the paths are correctly resolved regardless of where the application is run from.
# And / is used to separate the directories in the path, which is the correct way to do it on Unix/Linux/macOS and Windows.
CONNECT_BUNDLE = BASE_PATH / "secure" / "secure-connect-video-membership.zip"
TOKEN_FILE = BASE_PATH / "secure" / "video_membership_project-token.json"
# print(f"Bundle: {CONNECT_BUNDLE}, Token: {TOKEN_FILE}")


def get_session_astra_db():
    # This secure connect bundle is autogenerated when you download your SCB,
    # if yours is different update the file name below
    cloud_config = {
        'secure_connect_bundle': 'secure-connect-video-membership.zip',
        'connect_timeout': 30
    }

    # This token JSON file is autogenerated when you download your token,
    # if yours is different update the file name below
    with open(TOKEN_FILE) as f:
        secrets = json.load(f)

    CLIENT_ID = secrets["clientId"]
    CLIENT_SECRET = secrets["secret"]
    print(f"ID:{CLIENT_ID}, Secret:{CLIENT_SECRET}")

    profile = ExecutionProfile(request_timeout=30)
    auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
    cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider,
                      protocol_version=ProtocolVersion.V4, execution_profiles={EXEC_PROFILE_DEFAULT: profile})
    session = cluster.connect('video_membership_app')

    # To use the session in the application, we need to register the connection and set it as the default connection.
    # This means that any database operations performed by the application will use this session by default.
    # This is necessary for the application to communicate with the database using the established session.
    # connection.register_connection(str(session), session=session)
    # connection.set_default_connection(str(session))
    return session


def get_session():
    cluster = Cluster(['0.0.0.0'], connect_timeout=30)
    session = cluster.connect()
    connection.register_connection(str(session), session=session)
    connection.set_default_connection(str(session))
    return session
